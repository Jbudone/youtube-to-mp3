#!/bin/bash


opt_audio="--sout-audio"
opt_audiotranscoding="ab=128,channels=2,samplerate=44100"
opt_audiocodec="mp3"

opt_video=""
opt_videotranscoding=""
opt_videocodec="none"

opt_mux="raw"
opt_extension=".mp3"

url="$1"

# Getargs arguments
################

# -a audio
# -v video (includes audio)
while getopts "a:v:" opt; do
	case $opt in
		a)
			opt_extension=".mp3"
			;;
		v)
			opt_video=""
			opt_videotranscoding=""
			opt_videocodec="h264"
			opt_mux="avi"
			opt_extension=".avi"
			;;
	esac
	url="$OPTARG"
done


# curl the link to get the Title of the song
# ASSETS=$(curl -s $1 | sed -n 's/.*\(yt\.playerConfig.*};\)/\1/p')
# INIT="var yt={};"
# PR=" console.log(yt.playerConfig.args.title); "
# TMP_FILE=$(tempfile)
# echo $INIT $ASSETS $PR > $TMP_FILE
# TITLE=$(js $TMP_FILE | sed 's|/||g')
# if [ "$TITLE" = "" ]
# then
# 	TITLE="song"
# fi


# VLC streams the song
# echo Downloading File: $TITLE
# TMP_AUDIO=$(tempfile)



##################
# Current Update
#
# vlc -I dummy --no-sout-video --no-sout-standard-sap --no-sout-rtp-sap --sout-audio --sout-keep --no-loop --no-repeat --sout '#transcode{vcodec=none,acodec=mp3,ab=128,channels=2,samplerate=44100}:std{access=file,mux=raw,dst=tst.mp3}' http://www.youtube.com/watch?v=e5MAg_yWsq8 vlc://quit
###################
# Previous Updates
#
# cvlc -I dummy --no-sout-video --no-sout-standard-sap --no-sout-rtp-sap --sout-audio --sout-keep --no-loop --no-repeat --sout '#std{access=file,mux=ogg,dst=tst.mp3}' http://www.youtube.com/watch?v=oT3TJ_KBS8Q vlc://quit

TMPNAME=".`date +%Y-%m-%d-%H-%M-%S-%N`.tmp"
vlc -I dummy $url --verbose=2 --file-logging --logfile="$TMPNAME.log"  --no-sout-standard-sap --no-sout-rtp-sap $opt_audio --sout-keep --no-loop --no-repeat --ffmpeg-threads=1 --sout="#transcode{vcodec=$opt_videocodec,acodec=$opt_audiocodec,$opt_audiotranscoding}:std{access=file,mux=$opt_mux,dst=$TMPNAME}" vlc://quit
# vlc -I dummy $1 --verbose=2 --file-logging --logfile="$TMPNAME.log"  --no-sout-standard-sap --no-sout-rtp-sap --sout-audio --sout-keep --no-loop --no-repeat --ffmpeg-threads=1 --sout="#transcode{vcodec=h264,acodec=mp3,ab=128,channels=2,samplerate=44100}:std{access=file,mux=avi,dst=$TMPNAME}" vlc://quit
# vlc -I dummy $1 --verbose=2 --file-logging --logfile="$TMPNAME.log" --no-sout-video --no-sout-standard-sap --no-sout-rtp-sap --sout-audio --sout-keep --no-loop --no-repeat --ffmpeg-threads=1 --sout="#transcode{vcodec=none,acodec=mp3,ab=128,channels=2,samplerate=44100}:std{access=file,mux=raw,dst=$TMPNAME}" vlc://quit
# vlc -I dummy $1 --no-sout-video --no-sout-standard-sap --no-sout-rtp-sap --sout-audio --sout-keep --no-loop --no-repeat --ffmpeg-threads=1 --sout="#transcode{vcodec=none,acodec=mp3,ab=128,channels=2,samplerate=44100}:std{access=file,mux=raw,dst=$TITLE.mp3}" vlc://quit
if [ ! -f "$TMPNAME" ] || [ "(($(stat -c%s "$TMPNAME")))" == "((0))" ]; then
	echo "ERROR!!!!!"
	rm "$TMPNAME.log"
	rm "$TMPNAME"
	exit 2
fi

TITLE="`cat "$TMPNAME.log" | awk '{ if($1 == "lua" && $3 == "Name:") { s=""; for(i=4; i<= NF; i++) s = s " " $i; print s } }' | sed 's|/||g'`"
if [ "$TITLE" = "" ] ; then
	TITLE="download"
fi
rm "$TMPNAME.log"
mv "$TMPNAME" "$TITLE$opt_extension"


# Sometimes the stream fails (tmp file will be of type 'empty')
#RESULT=$(file $TMP_AUDIO | awk '{ print $2 }')
#echo $RESULT
#if [ $RESULT = "empty" ]
#then
#	echo "FAILED TO EXTRACT AUDIO... attempting again"
#	echo $0 $1
#	$0 $1 >/dev/null
#	exit 1;
#fi

# Convert file to mp3
#echo Converting $TITLE to mp3..
#avconv -acodec aac -i $TMP_AUDIO "$TITLE".mp3


# Cleanup
# rm $TMP_FILE

echo "Downloaded: ${TITLE}"
#rm $TMP_AUDIO
